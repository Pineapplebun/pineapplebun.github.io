{"version":3,"sources":["ui-profile/profile-card.tsx","feature-navigation/navigation-sidebar.tsx","feature-main/main-content.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["ProfileCard","className","alt","src","href","NavigationSidebar","List","ListItem","button","MainContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAGaA,G,YAAqC,kBAChD,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,wBACb,yBAAKC,IAAI,UAAUC,IAAI,kBAAkBF,UAAU,aAErD,4CACA,oDACA,0BAAMA,UAAU,kBACd,uBAAGG,KAAK,qDACN,yBAAKF,IAAI,cAAcC,IAAI,gBAAgBF,UAAU,cAEvD,uBAAGG,KAAK,mCACN,yBACEF,IAAI,YACJC,IAAI,6BACJF,UAAU,kBCbL,SAASI,IACtB,OACE,yBAAKJ,UAAU,wBACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,QAAM,GAAhB,QACA,kBAACD,EAAA,EAAD,CAAUC,QAAM,GAAhB,SACA,kBAACD,EAAA,EAAD,CAAUC,QAAM,GAAhB,yB,MCZK,SAASC,IACtB,OAAO,yDCcMC,MAbf,WACE,OACE,yBAAKT,UAAU,eACb,yBAAKA,UAAU,sBACb,kBAACI,EAAD,OAEF,yBAAKJ,UAAU,gBACb,kBAACQ,EAAD,SCAYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.123b982f.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport \"./profile-card.css\";\n\nexport const ProfileCard: FunctionComponent<{}> = () => (\n  <div className=\"profile-card-container\">\n    <div className=\"profile-picture-card\">\n      <img alt=\"My Face\" src=\"profile-pic.jpg\" className=\"picture\"></img>\n    </div>\n    <span>Kevin Chen</span>\n    <span>Software Developer</span>\n    <span className=\"logo-container\">\n      <a href=\"https://www.linkedin.com/in/kevin-chen-943850121/\">\n        <img alt=\"My LinkedIn\" src=\"LI-In-Bug.png\" className=\"logo-one\"></img>\n      </a>\n      <a href=\"https://github.com/Pineapplebun\">\n        <img\n          alt=\"My Github\"\n          src=\"Github-Mark-Light-64px.png\"\n          className=\"logo-two\"\n        ></img>\n      </a>\n    </span>\n  </div>\n);\n","import { List, ListItem } from \"@material-ui/core\";\nimport \"./navigation-sidebar.css\";\nimport React from \"react\";\nimport { ProfileCard } from \"../ui-profile/profile-card\";\n\nexport default function NavigationSidebar() {\n  return (\n    <div className=\"navigation-container\">\n      <div className=\"navigation-profile\">\n        <ProfileCard></ProfileCard>\n      </div>\n      <div className=\"navigation-list\">\n        <List>\n          <ListItem button>Home</ListItem>\n          <ListItem button>About</ListItem>\n          <ListItem button>Diagrammar Project</ListItem>\n        </List>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./main-content.css\";\n\nexport default function MainContent() {\n  return <div>Insert Main Content Here</div>;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport NavigationSidebar from \"./feature-navigation/navigation-sidebar\";\nimport MainContent from \"./feature-main/main-content\";\n\nfunction App() {\n  return (\n    <div className=\"app-content\">\n      <div className=\"navigation-sidebar\">\n        <NavigationSidebar></NavigationSidebar>\n      </div>\n      <div className=\"main-content\">\n        <MainContent></MainContent>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}